name: Update Routes Documentation

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate Routes Documentation
        env:
          BASE_URL: "https://nf.kita.blue"
        run: |
          #!/bin/bash
          set -euo pipefail

          # Utility Functions
          sanitize_path() {
            echo "$1" | tr ' ' '-' | sed -E 's/\.html$//'
          }

          get_folder_emoji() {
            local folder="$1"
            case "$folder" in
              *blog*) echo "📝" ;;
              *docs*) echo "📚" ;;
              *pages*) echo "📃" ;;
              *api*) echo "🛠️" ;;
              *) echo "📁" ;;
            esac
          }

          format_display_name() {
            echo "$1" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1'
          }

          # Prepare README Template
          [[ -f README.md ]] || cat > README.md << 'EOL'
          # Project Documentation

          Welcome to our project pages.
          EOL

          # Find and Process HTML Files
          html_files=$(find . -type f -name "*.html" ! -path "./README.md")
          
          # Generate Routes Documentation
          {
            # Preserve content before routes section
            sed '/## 📄 Available Routes/,$d' README.md

            # Routes Section Header
            echo -e "\n## 📄 Available Routes\n"
            echo -e "*Last updated: $(date "+%Y-%m-%d %H:%M UTC")*\n"

            # Check if any files exist
            if [[ -z "$html_files" ]]; then
              echo "🚧 No pages available yet."
            else
              echo -e "<details>\n<summary>Click to expand routes</summary>\n"
              echo -e "Browse through our available pages:\n"

              current_folder=""
              while IFS= read -r file; do
                # Sanitize and process file path
                clean_path=$(sanitize_path "${file#./}")
                folder=$(dirname "$clean_path")
                basename=$(basename "$clean_path")

                # Folder Header Logic
                if [[ "$folder" != "." && "$folder" != "$current_folder" ]]; then
                  folder_emoji=$(get_folder_emoji "$folder")
                  echo -e "\n### ${folder_emoji} ${folder}\n"
                  current_folder="$folder"
                fi

                # Route Generation
                if [[ -f "$file" ]]; then
                  if [[ "$basename" == "index" ]]; then
                    route=$([ "$folder" = "." ] && echo "/" || echo "/$folder")
                    echo "- [🏠 ${folder:-Homepage}]($BASE_URL$route)"
                  else
                    display_name=$(format_display_name "$basename")
                    echo "- [📄 $display_name]($BASE_URL/$clean_path)"
                  fi
                fi
              done <<< "$html_files"

              echo -e "\n</details>"

              # Stats Footer
              echo -e "\n---\n"
              folder_count=$(echo "$html_files" | sed 's|/[^/]*$||' | sort -u | grep -v "^\.$" | wc -l)
              file_count=$(echo "$html_files" | wc -l)
              echo "📊 **Stats**: $file_count page(s) in $folder_count folder(s)"
              echo -e "\n💡 *Routes auto-updated on page changes.*"
            fi
          } > README.new

          # Update README only if changes exist
          if ! cmp -s README.md README.new; then
            mv README.new README.md
            echo "should_commit=true" >> "$GITHUB_ENV"
          else
            rm README.new
            echo "should_commit=false" >> "$GITHUB_ENV"
          fi

      - name: Commit Changes
        if: env.should_commit == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "📝 Update routes documentation [skip ci]"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}