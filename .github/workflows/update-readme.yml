name: Update Routes Documentation

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate Routes Documentation
        env:
          BASE_URL: "https://nf.kita.blue"
        run: |
          #!/bin/bash
          set -euo pipefail

          # Utility Functions
          sanitize_path() {
            echo "$1" | tr ' ' '-' | sed -E 's/\.html$//'
          }

          get_folder_emoji() {
            case "$1" in
              *blog*) echo "📝" ;;
              *docs*) echo "📚" ;;
              *pages*) echo "📃" ;;
              *api*) echo "🛠️" ;;
              *) echo "📁" ;;
            esac
          }

          format_display_name() {
            echo "$1" | sed 's/-/ /g' | awk '{for (i=1; i<=NF; i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1'
          }

          # Prepare README if it doesn't exist
          [[ -f README.md ]] || cat > README.md << 'EOL'
          # Project Documentation

          Welcome to our project documentation.

          ## 📄 Available Routes

          Routes will appear here automatically after the next update.
          EOL

          # Find HTML Files
          mapfile -t files < <(find . -type f -name "*.html" ! -path "./README.md" | sort)

          # Generate Routes Section
          {
            echo "# Project Documentation"
            echo -e "\nWelcome to our project documentation.\n"
            echo "## 📄 Available Routes"
            echo "*Last updated: $(date "+%Y-%m-%d %H:%M UTC")*"
            echo

            if [[ ${#files[@]} -eq 0 ]]; then
              echo "🚧 No pages available yet."
            else
              echo "<details>"
              echo "<summary>Click to expand routes</summary>"
              echo

              # Group by folders
              declare -A folder_groups
              for file in "${files[@]}"; do
                clean_path=$(sanitize_path "${file#./}")
                folder=$(dirname "$clean_path")
                [[ "$folder" == "." ]] && folder="Root"
                folder_groups["$folder"]+="$file "
              done

              # Sort folders
              for folder in $(printf "%s\n" "${!folder_groups[@]}" | sort); do
                folder_emoji=$(get_folder_emoji "$folder")
                echo -e "### ${folder_emoji} ${folder}"
                echo

                # Sort files in folder
                IFS=' ' read -ra folder_files <<< "${folder_groups[$folder]}"
                for file in $(printf "%s\n" "${folder_files[@]}" | sort); do
                  clean_path=$(sanitize_path "${file#./}")
                  basename=$(basename "$clean_path")
                  folder_name=$(dirname "$clean_path")

                  if [[ "$basename" == "index" ]]; then
                    route=$([[ "$folder_name" == "." ]] && echo "/" || echo "/$folder_name")
                    display_name=$([[ "$folder_name" == "." ]] && echo "Homepage" || format_display_name "$folder_name")
                    echo "- [🏠 $display_name]($BASE_URL$route)"
                  else
                    display_name=$(format_display_name "$basename")
                    echo "- [📄 $display_name]($BASE_URL/$clean_path)"
                  fi
                done
                echo
              done

              echo "</details>"
              echo
              echo "---"
              echo
              echo "📊 **Stats**: ${#files[@]} page(s) in ${#folder_groups[@]} folder(s)"
              echo "💡 *Routes auto-updated on page changes.*"
            fi
          } > README.new

          # Update README if content changes
          if ! cmp -s README.md README.new; then
            mv README.new README.md
            echo "should_commit=true" >> "$GITHUB_ENV"
          else
            rm README.new
            echo "should_commit=false" >> "$GITHUB_ENV"
          fi

      - name: Commit and Push Changes
        if: env.should_commit == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "📝 Update routes documentation [skip ci]"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
