name: Update Project Documentation

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate Project Routes
        env:
          BASE_URL: "https://nf.kita.blue"
        run: |
          #!/bin/bash
          set -euo pipefail

          # Configuration
          EMOJI_MAP=(
            "praktikum:🔬"
            "pertemuan:📅"
            "tugas:📋"
            "docs:📚"
            "src:💻"
            "test:🧪"
          )

          # Utility Functions
          get_folder_emoji() {
            local path="$1"
            for mapping in "${EMOJI_MAP[@]}"; do
              if [[ "$path" == *"${mapping%%:*}"* ]]; then
                echo "${mapping##*:}"
                return
              fi
            done
            echo "📁"
          }

          sanitize_filename() {
            basename "$1" .html | 
              tr '-' ' ' | 
              awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1'
          }

          generate_routes() {
            local base_path="$1"
            local depth="${2:-0}"
            local indent=""

            # Create appropriate header based on depth
            for ((i=0; i<depth; i++)); do
              indent+="#"
            done
            indent+=" "

            # Find and process files and directories
            local files=$(find "$base_path" -maxdepth 1 -type f \( -name "index.html" -o -name "*.html" \) | sort)
            local dirs=$(find "$base_path" -maxdepth 1 -type d ! -path '*/\.*' | tail -n +2 | sort)

            # Only process if files or directories exist
            if [[ -n "$files$dirs" ]]; then
              local relative_path="${base_path#./}"
              local folder_emoji=$(get_folder_emoji "$relative_path")

              # Print directory header
              echo "${indent}${folder_emoji} [${relative_path:-.}]"

              # Process index files first
              for file in $files; do
                if [[ "$(basename "$file")" == "index.html" ]]; then
                  local clean_path=$(sed 's|^\./||; s|index\.html$||' <<< "$file")
                  echo "- [Overview]($BASE_URL/${clean_path}) 🏠"
                fi
              done

              # Process other HTML files
              for file in $files; do
                if [[ "$(basename "$file")" != "index.html" ]]; then
                  local clean_path=$(sed 's|^\./||; s|\.html$||' <<< "$file")
                  local display_name=$(sanitize_filename "$file")
                  echo "- [${display_name}]($BASE_URL/${clean_path}) 📄"
                fi
              done

              # Recursively process subdirectories
              for dir in $dirs; do
                generate_routes "$dir" $((depth + 1))
              done
            fi
          }

          # Prepare README
          [[ -f README.md ]] || echo "# Project Documentation" > README.md

          # Generate documentation
          {
            # Preserve existing content before routes section
            sed '/## Project Routes/,$d' README.md

            echo -e "\n## Project Routes\n"
            echo "*Last updated: $(date "+%Y-%m-%d %H:%M UTC")*\n"

            # Start route generation
            generate_routes "."

            echo -e "\n---\n"
            
            # Project statistics
            total_pages=$(find . -type f -name "*.html" ! -path "./README.md" ! -path '*/\.*' | wc -l)
            total_dirs=$(find . -type d ! -path '*/\.*' | wc -l)

            echo "### Project Stats"
            echo "- Pages: ${total_pages}"
            echo "- Folders: $((total_dirs - 1))"
            echo -e "\n*Automatically updated on changes.*"
          } > README.new

          # Update README only if changes exist
          if ! cmp -s README.md README.new; then
            mv README.new README.md
            echo "should_commit=true" >> "$GITHUB_ENV"
          else
            rm README.new
            echo "should_commit=false" >> "$GITHUB_ENV"
          fi

      - name: Commit Documentation
        if: env.should_commit == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "📝 Update project routes [skip ci]"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}