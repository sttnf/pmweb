name: Update Routes Documentation

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate Routes Documentation
        env:
          BASE_URL: "https://nf.kita.blue"
        run: |
          #!/bin/bash
          set -euo pipefail

          # Utility Functions
          sanitize_path() {
            echo "$1" | tr ' ' '-' | sed -E 's/\.html$//'
          }

          get_folder_emoji() {
            local folder="$1"
            case "$folder" in
              *blog*) echo "📝" ;;
              *docs*) echo "📚" ;;
              *pages*) echo "📃" ;;
              *api*) echo "🛠️" ;;
              *) echo "📁" ;;
            esac
          }

          format_display_name() {
            echo "$1" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1'
          }

          # Prepare README Template
          [[ -f README.md ]] || cat > README.md << 'EOL'
          # Project Documentation

          Welcome to our project pages.
          EOL

          # Find and Sort HTML Files
          mapfile -t sorted_files < <(find . -type f -name "*.html" ! -path "./README.md" | sort)
          
          # Generate Routes Documentation
          {
            # Preserve content before routes section
            sed '/## 📄 Available Routes/,$d' README.md

            # Routes Section Header
            echo -e "\n## 📄 Available Routes\n"
            echo -e "*Last updated: $(date "+%Y-%m-%d %H:%M UTC")*\n"

            # Check if any files exist
            if [[ ${#sorted_files[@]} -eq 0 ]]; then
              echo "🚧 No pages available yet."
            else
              echo -e "<details>\n<summary>Click to expand routes</summary>\n"
              echo -e "Browse through our available pages:\n"

              # Group files by folder and sort
              declare -A folder_groups
              declare -A index_files
              for file in "${sorted_files[@]}"; do
                clean_path=$(sanitize_path "${file#./}")
                folder=$(dirname "$clean_path")
                basename=$(basename "$clean_path")
                
                # Separate index files
                if [[ "$basename" == "index" ]]; then
                  index_files["$folder"]="$file"
                else
                  [[ "$folder" == "." ]] && folder=""
                  folder_groups["$folder"]+="$file "
                fi
              done

              # Sort folders
              mapfile -t sorted_folders < <(printf '%s\n' "${!folder_groups[@]}" | sort)
              
              # Prepend root index if exists
              if [[ -n "${index_files[.]}" ]]; then
                echo "- [🏠 Homepage]($BASE_URL/)"
              fi

              # Process sorted folders and their files
              for folder in "${sorted_folders[@]}"; do
                # Add index file for folder if exists
                if [[ -n "${index_files[$folder]}" ]]; then
                  display_name=$([ "$folder" == "." ] && echo "Homepage" || echo "$folder")
                  route=$([ "$folder" == "." ] && echo "/" || echo "/$folder")
                  folder_emoji=$(get_folder_emoji "$folder")
                  
                  # Display folder header for non-root folders
                  if [[ "$folder" != "." ]]; then
                    echo -e "\n### ${folder_emoji} ${folder}\n"
                  fi
                  
                  echo "- [🏠 $display_name]($BASE_URL$route)"
                fi

                # Prepare files for this folder
                IFS=' ' read -ra folder_files <<< "${folder_groups[$folder]}"
                
                # Skip if no files
                [[ ${#folder_files[@]} -eq 0 ]] && continue

                # Sort and generate routes for this folder
                mapfile -t sorted_folder_files < <(printf '%s\n' "${folder_files[@]}" | sort)
                
                for file in "${sorted_folder_files[@]}"; do
                  # Sanitize and process file path
                  clean_path=$(sanitize_path "${file#./}")
                  folder=$(dirname "$clean_path")
                  basename=$(basename "$clean_path")

                  # Route Generation for non-index files
                  display_name=$(format_display_name "$basename")
                  echo "- [📄 $display_name]($BASE_URL/$clean_path)"
                done
              done

              echo -e "\n</details>"

              # Stats Footer
              echo -e "\n---\n"
              folder_count=${#sorted_folders[@]}
              file_count=${#sorted_files[@]}
              echo "📊 **Stats**: $file_count page(s) in $folder_count folder(s)"
              echo -e "\n💡 *Routes auto-updated on page changes.*"
            fi
          } > README.new

          # Update README only if changes exist
          if ! cmp -s README.md README.new; then
            mv README.new README.md
            echo "should_commit=true" >> "$GITHUB_ENV"
          else
            rm README.new
            echo "should_commit=false" >> "$GITHUB_ENV"
          fi

      - name: Commit Changes
        if: env.should_commit == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "📝 Update routes documentation [skip ci]"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}