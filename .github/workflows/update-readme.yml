name: Update Routes Documentation

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate Routes Documentation
        env:
          BASE_URL: "https://nf.kita.blue"
        run: |
          #!/bin/bash
          set -euo pipefail

          # Simplified utility functions
          sanitize_path() { echo "$1" | tr ' ' '-' | sed -E 's/\.html$//' ; }
          get_folder_emoji() {
            case "$1" in
              *blog*) echo "üìù" ;;
              *docs*) echo "üìö" ;;
              *pages*) echo "üìÉ" ;;
              *api*) echo "üõ†Ô∏è" ;;
              *) echo "üìÅ" ;;
            esac
          }
          format_display_name() { 
            echo "$1" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1'
          }

          # Create README if not exists
          [[ -f README.md ]] || echo "# Project Documentation" > README.md

          # Find HTML files and non-hidden directories
          mapfile -t html_files < <(find . -type f -name "*.html" ! -path "./README.md" | sort)
          mapfile -t dirs < <(find . -type d ! -path '*/\.*' | sed 's|^\./||' | sort)

          # Exit if no files or directories
          [[ ${#html_files[@]} -eq 0 && ${#dirs[@]} -eq 0 ]] && exit 0

          # Generate routes documentation
          {
            # Preserve content before routes section
            sed '/## üìÑ Available Routes/,$d' README.md

            # Routes section header
            echo -e "\n## üìÑ Available Routes\n"
            echo -e "*Last updated: $(date "+%Y-%m-%d %H:%M UTC")*\n"

            echo -e "<details>\n<summary>Click to expand routes and folders</summary>\n"

            # Declare associative arrays
            declare -A folder_files=()
            declare -A index_files=()

            # Group HTML files by directory
            for file in "${html_files[@]}"; do
              clean_path=$(sanitize_path "${file#./}")
              folder=$(dirname "$clean_path")
              basename=$(basename "$clean_path")
              
              # Track index files
              if [[ "$basename" == "index" ]]; then
                index_files["$folder"]="$file"
              fi
              
              # Group files by folder
              [[ "$folder" == "." ]] && folder=""
              if [[ -z "${folder_files[$folder]:-}" ]]; then
                folder_files["$folder"]="$file"
              else
                folder_files["$folder"]+=" $file"
              fi
            done

            # Process directories
            for dir in "${dirs[@]}"; do
              [[ "$dir" == "." ]] && continue

              # Skip directories with no files
              dir_files="${folder_files[$dir]:-}"
              dir_index="${index_files[$dir]:-}"
              
              if [[ -z "$dir_files" && -z "$dir_index" ]]; then
                continue
              fi

              folder_emoji=$(get_folder_emoji "$dir")
              index_route=""
              [[ -n "$dir_index" ]] && index_route="/$dir"

              echo -e "\n### ${folder_emoji} ${dir}\n"
              [[ -n "$index_route" ]] && echo "- [üè† ${dir}]($BASE_URL$index_route)"

              # Process files in this directory
              if [[ -n "$dir_files" ]]; then
                for file in $dir_files; do
                  clean_path=$(sanitize_path "${file#./}")
                  basename=$(basename "$clean_path")
                  [[ "$basename" == "index" ]] && continue

                  display_name=$(format_display_name "$basename")
                  echo "- [üìÑ $display_name]($BASE_URL/$clean_path)"
                done
              fi
            done

            # Handle root directory separately
            root_files="${folder_files[.]:-}"
            root_index="${index_files[.]:-}"
            if [[ -n "$root_index" || -n "$root_files" ]]; then
              echo -e "\n### üè† Root\n"
              
              # Display root index if exists
              [[ -n "$root_index" ]] && echo "- [üè† Homepage]($BASE_URL/)"

              # Process root files
              if [[ -n "$root_files" ]]; then
                for file in $root_files; do
                  clean_path=$(sanitize_path "${file#./}")
                  basename=$(basename "$clean_path")
                  [[ "$basename" == "index" ]] && continue

                  display_name=$(format_display_name "$basename")
                  echo "- [üìÑ $display_name]($BASE_URL/$clean_path)"
                done
              fi
            fi

            echo -e "\n</details>\n---\n"
            echo "üìä **Stats**: ${#html_files[@]} page(s) in $((${#dirs[@]} - 1)) folder(s)"
            echo -e "\nüí° *Routes auto-updated on page changes.*"
          } > README.new

          # Update README only if changes exist
          if ! cmp -s README.md README.new; then
            mv README.new README.md
            echo "should_commit=true" >> "$GITHUB_ENV"
          else
            rm README.new
            echo "should_commit=false" >> "$GITHUB_ENV"
          fi

      - name: Commit Changes
        if: env.should_commit == 'true'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "üìù Update routes documentation [skip ci]"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}